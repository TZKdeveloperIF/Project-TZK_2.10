; args: [unit, tanks, timePatrol]

? !(local LocalServerObject) : exit
_unit = _this select 0
_unit disableAI "TARGET"; _unit disableAI "AUTOTARGET"; _unit disableAI "MOVE"

~5

_tanks = _this select 1
_timePatrol = (60*(Random 60))

_Destr = (30*(Random 4))

_timeDestroy = (_Destr*60)


_si = siRes
_group = group _unit

; DELETE UNIT AND POSSIBLE CREW
_crew = crew _unit
_i = 0
_c = count _crew
#CheckCrew
  ? !(_i < _c) : goto "DeleteUnit"
  _u = _crew select _i
  _i = _i + 1

  ? _u == _unit : goto "CheckCrew"
  unassignVehicle _u 
  _u action ["eject", _unit]
  ~1
  deleteVehicle _u  
  goto "CheckCrew"
#DeleteUnit
~1
deleteVehicle _unit

? isNull _group : format["ERROR: _group is NULL for RES patrol group"] call fDebugLog; exit

@!(mutexInitResGroups)
mutexInitResGroups = true
_list = groupMatrix select _si
_list set [count _list, _group]
;_gi = [_group, _list] call funcGetIndex
groupsPatrol set [count groupsPatrol, _group]
groupPatrolJoinMatrix set [count groupPatrolJoinMatrix, 0]
mutexInitResGroups = false

@( !(isNull (mhq select si0)) && !(isNull (mhq select si1)) )

_posStart = [] call funcUpdateResStartPos
   
~10
_posPatrol = _posStart

_i = 0
#InitAddTank
  _i = _i + 1
  ? _i > _tanks : goto "TanksAdded"
  _type = -1
  while "_type == -1" do { _type = (armorTown select _si) call funcGetRandomUnitType }
  _pos = [_posStart, 10, 20] call funcGetRandomPos
  [_type, 1, 1, 0, _pos, random 360, _si, -1, _group, 0, 0] exec "Common\AddUnit.sqs"
  ~1
  goto "InitAddTank"
#TanksAdded

_town = objNull

; Use mutexInitResGroups to let server only ask one patrol group move in a short time. Aiming to reduce server's workload.
#Update
	mutexInitResGroups = false
	  ~(120 - 15 + random 30)
	@!(mutexInitResGroups)
	mutexInitResGroups = true

	? (count (units _group)) == 0 : goto "Update"

  _group setCombatMode "RED"; _group setBehaviour "COMBAT"; _group setSpeedMode "NORMAL"
  
  ; TODO { _x disableAI "TARGET" } foreach (units _group)

	? time < _timePatrol : goto "Patrol"
	? time > _timeDestroy : goto "Destroy"
	_res = [-1,0]
	{ if (_x == driver vehicle _x) then { _res = [getPos _x, siRes, []] call funcGetClosestEnemyTown; if ((_res select 0) != -1) then { _flag = (towns select (_res select 0)) select tdFlag; _x doMove ([getPos _flag,4, 4] call funcGetRandomPos) } } } forEach (units _group)
	? (_res select 0) != -1 : goto "Update"


#Patrol
	? time < ([60*10, 60*0] select dev): goto "Update"
;	_posOld = _posPatrol
;	_posPatrol = [_posOld] call funcUpdateResPatrolPos

;	{ if (_x == driver vehicle _x) then { _x doMove ([_posPatrol, 10, 20] call funcGetRandomPos) } } foreach (units _group)
;		; player globalchat Format ["UpdatePatrollingResTank.sqs: Patrol: _posPatrol=%1", _posPatrol]
;	[_group] call loadFile {Server\UpdateResPatrolTowns.sqf}
{	if (_x == driver vehicle _x) then	{ 	_town0List = [ getPos _x, [siRes], [] ] call funcGetClosestTown;	_town0 = _town0List select 0;	_distance0 = _town0List select 1;	_town0Index = _town0List select 2;		_town1List = [ getPos _x, [siRes], [_town0Index] ] call funcGetClosestTown;	_town1 = _town1List select 0;	_distance1 = _town1List select 1;	_town1Index = _town1List select 2;		_town2List = [ getPos _x, [siRes], [_town0Index, _town1Index] ] call funcGetClosestTown;	_town2 = _town2List select 0;		_town = [_town0, [_town1,_town2] select ((random 1) < 0.667)] select (_distance0 * 4 < _distance1);	_x doMove ([getPos (_town select 0), 150, 150] call funcGetRandomPos);	};} forEach (units _group);
		goto "Update"

#Destroy
;	[_group] call funcUpdateResPatrolDestroy
{	_res1 = [getPos _x, si0] call funcGetClosestEnemyObject;	_res0 = [getPos _x, si1] call funcGetClosestEnemyObject;	_object = [_res1 select 0, _res0 select 0] select ((_res0 select 1) < (_res1 select 1)); 	if ( (_res0 select 1) < (1 + time/3600)*viewDistance || (_res1 select 1) < (1 + time/3600)*viewDistance ) then	{	if (_x == driver vehicle _x) then { _x doMove ([getPos _object, 50, 100] call funcGetRandomPos) };	if ( _x != vehicle _x && _x == gunner vehicle _x && (_x distance _object) < 200) then { [_x, _object] exec "Server\DestroyObject.sqs" };	}	else	{	if (_x == driver vehicle _x) then	{		_res0 = [getPos _x, siRes, []] call funcGetClosestEnemyTown;		if ((_res0 select 0) != -1) then { _flag = (towns select (_res0 select 0)) select tdFlag; _x doMove ([getPos _flag, 4, 4] call funcGetRandomPos) };	} 	}} forEach (units _group);
	goto "Update"
