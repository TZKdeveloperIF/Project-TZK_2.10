; args: value

_value = _this
? _value < 0 : _value exec "Server\HandleJoinByUnitCam.sqs"; exit

_giTo = _value % GroupsNum
_value = (_value - _giTo) / GroupsNum

_giFrom = _value % GroupsNum
_value = (_value - _giFrom) / GroupsNum

_si = _value % 2
_value = (_value - _si) / 2

_unitsID = []; _value = _value * 4; _index = 0
while "_index < 12" do { _info = _value % 2; _unitsID set [_index, _info == 1]; _value = (_value - _info) / 2; _index = _index + 1 }
_unitsID set [12, _value == 1]

_members = "_x" count _unitsID


_allow = 0; _full = 0; _busy = 0


_unitsInProgress = ((groupUnitsBuildingMatrix select _si) select _giTo)
_size = (count units ((groupMatrix select _si) select _giTo)) + _unitsInProgress
? ((_members + _size) > maxGroupSize): _full = 1; goto "Reply"

? mutexJoinServer : _busy = 1; goto "Reply"

mutexJoinServer = true; _allow = 1; goto "Reply"


#Reply
_value = _allow + 2*_full + 2*2*_busy
pvJoinReply = _value; publicVariable "pvJoinReply"

? _busy == 1 : exit
? _allow == 0 : mutexJoinServer = false; exit
_groupJoin = call format ["groupJoin%1", _si]; _leaderJoin = call format ["leaderJoin%1", _si]

	_ids = (groupUnitIDMatrix select _si) select _giFrom; _uid = 0; _text = ""
	_units = units ((groupMatrix select _si) select _giFrom); _unitsToJoin = []

	_index = 0; _count = count _units
	while "_uid <= 12 && _index < _count" do { _found = false; 		if (_unitsID select _uid) then { 	while "!_found && _index < _count" do 	{ 	_text = format["%1", _units select _index];  	if (_text == (_ids select _uid)) then {_unitsToJoin = _unitsToJoin + [_units select _index]; _found = true}; 	_index = _index + 1 	} 	}; 	_uid = _uid + 1}
	? count _unitsToJoin == 0 : _remoteIDs = []; {_remoteIDs set [count _remoteIDs, _x + " REMOTE"]} forEach _ids; _uid = 0; _index = 0; while "_uid <= 12 && _index < _count" do { _found = false; 		if (_unitsID select _uid) then { 	while "!_found && _index < _count" do 	{ 	_text = format["%1", _units select _index];  	if (_text == (_remoteIDs select _uid)) then {_unitsToJoin = _unitsToJoin + [_units select _index]; _found = true}; 	_index = _index + 1 	} 	}; 	_uid = _uid + 1}
	
	
	? count _unitsToJoin == 0 : mutexJoinServer = false; exit

	{_leaderJoin reveal _x} forEach _unitsToJoin
	~0.1
	_unitsToJoin join _groupJoin
	
	_try = 0; _unitsJoint = []
	#FirstRepeat
	~0.4
	_count = count _unitsToJoin; _index = 0
		#FirstGroupCheck
			? (group (_unitsToJoin select _index)) == _groupJoin : _unitsJoint = _unitsJoint + [_unitsToJoin select _index]
			_index = _index + 1
			? _index < _count : goto "FirstGroupCheck"
		_unitsToJoin = _unitsToJoin - _unitsJoint
		? count _unitsToJoin > 0 && _try < 10 : _unitsToJoin join _groupJoin; _try = _try + 1; goto "FirstRepeat"
		
	~0.5
_units = ((units _groupJoin) - [_leaderJoin])
if (((groupMatrix select _si) select _giTo) in (groupAiMatrix select _si)) then { _units join ((groupMatrix select _si) select _giTo); if !(((groupMatrix select _si) select _giFrom) in (groupAiMatrix select _si)) then {[_units] call funcAssignJoinAI} } else { pvJoinReceive = _giTo + GroupsNum*_si; publicVariable "pvJoinReceive" }
? ((groupMatrix select _si) select _giFrom) in (groupAiMatrix select _si) : _order = (orderMatrix select _si) select _giFrom; _order set [0, (_order select 0) + 1]


? !(((groupMatrix select _si) select _giTo) in (groupAiMatrix select _si)) : goto "DONE"
? count _units == 0 : goto "DONE"
	_try = 0; _unitsJoint = []
	#SecondRepeat
	~0.4
	_count = count _units; _index = 0
		#SecondGroupCheck
			? (group (_units select _index)) == ((groupMatrix select _si) select _giTo) : _unitsJoint = _unitsJoint + [_units select _index]
			_index = _index + 1
			? _index < _count : goto "SecondGroupCheck"
		_units = _units - _unitsJoint
		? count _units > 0 && _try < 10 : _units join ((groupMatrix select _si) select _giTo); _try = _try + 1; goto "SecondRepeat"
  
	; Need to add Killed-EH to new-joint-to-server units. However unnecessary to do this step in HandleJoinByUnitCam.sqs
	? !(((groupMatrix select _si) select _giFrom) in (groupAiMatrix select _si)) && ((groupMatrix select _si) select _giTo) in (groupAiMatrix select _si) : _cost = 0; _type = -1; { _type = _x call funcgetunittypefromobject; if (_type >= maxUnitTypes || _type < 0) then {_cost = (unitDefs select (utCustom select _si)) select udCost} else {_cost = (unitDefs select _type) select udCost; [_x, _si, _cost] exec "Common\EventAdd_InfantryKilled.sqs"} } forEach _unitsJoint

#DONE	
; Wait till Join Process completed
@( count (units _groupJoin) == 1 )

; ? ((groupMatrix select _si) select _giFrom) in (groupAiMatrix select _si) && !(((groupMatrix select _si) select _giTo) in (groupAiMatrix select _si)) : { if !(_x in (units ((groupMatrix select _si) select _giFrom))) then {_x removeAllEventHandlers "Killed"} } forEach _units

~1
mutexJoinServer = false